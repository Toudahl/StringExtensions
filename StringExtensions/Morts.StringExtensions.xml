<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Morts.StringExtensions</name>
    </assembly>
    <members>
        <member name="T:Morts.StringExtensions.CheckingExtensions">
            <summary>
            Extension methods that only checks, and returns a bool indicating the result
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.CheckingExtensions.IsNullEmptyOrWhitespace(System.String)">
            <summary>
            Will indicate if the string is null, empty or whitespace
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Morts.StringExtensions.CheckingExtensions.IsNull(System.String)">
            <summary>
            Will indicate if the string is null or not
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Morts.StringExtensions.CheckingExtensions.IsEmpty(System.String)">
            <summary>
            Will indicate if the string is empty or not.
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Morts.StringExtensions.CheckingExtensions.IsWhitespace(System.String)">
            <summary>
            Will indicate if the string is whitespace or not.
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:Morts.StringExtensions.ReturnOrThrowExtensions">
            <summary>
            Extension methods that either returns the value, or throws an exception detailing the problem with the input.
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ReturnOrThrowExtensions.ReturnOrThrowIfNullEmptyOrWhitespace(System.String,System.String)">
            <summary>
            Will throw an exception if the input is either null, empty or whitespace only. Otherwise the input will be returned as is.
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Morts.StringExtensions.ReturnOrThrowExtensions.ReturnOrThrowIfNull(System.String,System.String)">
            <summary>
            Will throw an exception if the input is null. Otherwise the input will be returned as is.
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Morts.StringExtensions.ReturnOrThrowExtensions.ReturnOrThrowIfEmpty(System.String,System.String)">
            <summary>
            Will throw an exception if the input is empty. Otherwise the input will be returned as is.
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:Morts.StringExtensions.ReturnOrThrowExtensions.ReturnOrThrowIfWhitespace(System.String,System.String)">
            <summary>
            Will throw an exception if the input is whitespace only. Otherwise the input will be returned as is.
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Morts.StringExtensions.ThrowingExtensions">
            <summary>
            Extension methods that throws an exception if there are an issue with the input
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ThrowingExtensions.ThrowIfNullEmptyOrWhitespace(System.String,System.String)">
            <summary>
            Will throw an exception if the input is either null, empty or whitespace only
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Morts.StringExtensions.ThrowingExtensions.ThrowIfNull(System.String,System.String)">
            <summary>
            Will throw if the string is null
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Morts.StringExtensions.ThrowingExtensions.ThrowIfEmpty(System.String,System.String)">
            <summary>
            Throw if the string is empty. Will not throw if null.
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Morts.StringExtensions.ThrowingExtensions.ThrowIfWhitespace(System.String,System.String)">
            <summary>
            Throw if the string is whitespace only. Will not throw if null or empty
            </summary>
            <param name="input"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Morts.StringExtensions.ValueString">
            <summary>
            Represents a string that cannot be whitespace only, and must contain at least one char.
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.#ctor(System.String)">
            <summary>
            Use the implicit operator instead.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.op_Implicit(Morts.StringExtensions.ValueString)~System.String">
            <summary>
            Converts the <see cref="T:Morts.StringExtensions.ValueString"/> to a <see cref="T:System.String"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.op_Implicit(System.String)~Morts.StringExtensions.ValueString">
            <summary>
            Converts the <see cref="T:System.String"/> to a <see cref="T:Morts.StringExtensions.ValueString"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.ToString">
            <summary>
            Returns the value of the encapsulated <see cref="T:System.String"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.Equals(Morts.StringExtensions.ValueString)">
            <summary>
            Compare to <see cref="T:Morts.StringExtensions.ValueString"/>
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.Equals(Morts.StringExtensions.ValueString,System.StringComparison)">
            <summary>
            Compare to <see cref="T:Morts.StringExtensions.ValueString"/> using a <see cref="T:System.StringComparison"/>
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.Equals(System.String)">
            <summary>
            Compare to <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.Equals(System.String,System.StringComparison)">
            <summary>
            Compare to <see cref="T:System.String"/> using a <see cref="T:System.StringComparison"/>
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.Equals(System.Object)">
            <summary>
            Compare to <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:Morts.StringExtensions.ValueString.GetHashCode">
            <summary>
            Gets the hashcode from the encapsulated string
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
